262. Trips and Users
https://leetcode.com/problems/trips-and-users/

The Trips table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are both foreign keys to the Users_Id at the Users table. 
Status is an ENUM type of (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’).

+----+-----------+-----------+---------+--------------------+----------+
| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|
+----+-----------+-----------+---------+--------------------+----------+
| 1  |     1     |    10     |    1    |     completed      |2013-10-01|
| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|
| 3  |     3     |    12     |    6    |     completed      |2013-10-01|
| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|
| 5  |     1     |    10     |    1    |     completed      |2013-10-02|
| 6  |     2     |    11     |    6    |     completed      |2013-10-02|
| 7  |     3     |    12     |    6    |     completed      |2013-10-02|
| 8  |     2     |    12     |    12   |     completed      |2013-10-03|
| 9  |     3     |    10     |    12   |     completed      |2013-10-03| 
| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|
+----+-----------+-----------+---------+--------------------+----------+
The Users table holds all users. Each user has an unique Users_Id, and Role is an ENUM type of (‘client’, ‘driver’, ‘partner’).

+----------+--------+--------+
| Users_Id | Banned |  Role  |
+----------+--------+--------+
|    1     |   No   | client |
|    2     |   Yes  | client |
|    3     |   No   | client |
|    4     |   No   | client |
|    10    |   No   | driver |
|    11    |   No   | driver |
|    12    |   No   | driver |
|    13    |   No   | driver |
+----------+--------+--------+

Write a SQL query to find the cancellation rate of requests made by unbanned users 
(both client and driver must be unbanned) between Oct 1, 2013 and Oct 3, 2013. 
The cancellation rate is computed by dividing the number of canceled (by client or driver) 
requests made by unbanned users by the total number of requests made by unbanned users.

For the above tables, your SQL query should return the following rows with the cancellation rate being rounded to two decimal places.

+------------+-------------------+
|     Day    | Cancellation Rate |
+------------+-------------------+
| 2013-10-01 |       0.33        |
| 2013-10-02 |       0.00        |
| 2013-10-03 |       0.50        |
+------------+-------------------+

Schema:

Create table L_262_Trips (Id int, Client_Id int, Driver_Id int, City_Id int,  Status  varchar(50), Request_at Date);
Truncate table L_262_Trips;
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (1, 1, 10, 1, 'completed', '2013-10-01');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (2, 2, 11, 1, 'cancelled_by_driver', '2013-10-01');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (3, 3, 12, 6, 'completed', '2013-10-01');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (4, 4, 13, 6, 'cancelled_by_driver', '2013-10-01');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (5, 1, 10, 1, 'completed', '2013-10-02');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (6, 2, 11, 6, 'completed', '2013-10-02');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (7, 3, 12, 6, 'completed', '2013-10-02');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (8, 2, 12, 12, 'completed', '2013-10-03');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (9, 3, 10, 12, 'completed', '2013-10-03');
insert into L_262_Trips (Id , Client_Id , Driver_Id , City_Id ,  Status, Request_at) values (10, 4, 13, 12, 'cancelled_by_driver', '2013-10-03');

Create table L_262_Users (Users_Id int, Banned varchar(50), Role varchar(50));
Truncate table L_262_Users;
insert into L_262_Users (Users_Id , Banned , Role) values (1, 'No', 'client');
insert into L_262_Users (Users_Id , Banned , Role) values (2, 'Yes', 'client');
insert into L_262_Users (Users_Id , Banned , Role) values (3, 'No', 'client');
insert into L_262_Users (Users_Id , Banned , Role) values (4, 'No', 'client');
insert into L_262_Users (Users_Id , Banned , Role) values (10, 'No', 'driver');
insert into L_262_Users (Users_Id , Banned , Role) values (11, 'No', 'driver');
insert into L_262_Users (Users_Id , Banned , Role) values (12, 'No', 'driver');
insert into L_262_Users (Users_Id , Banned , Role) values (13, 'No', 'driver');


Create table  Trips (Id varchar(10), Client_Id varchar(10), Driver_Id varchar(10), City_Id varchar(10), Status varchar(20), Request_at varchar(50))
Create table  Users (Users_Id varchar(10), Banned varchar(50), Role varchar(20))

Truncate table Trips
Truncate table Users

insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('1', '1', '10', '1', 'completed', '2013-10-01')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('2', '2', '11', '1', 'cancelled_by_driver', '2013-10-01')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('3', '3', '12', '6', 'completed', '2013-10-01')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('4', '4', '13', '6', 'cancelled_by_client', '2013-10-01')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('5', '1', '10', '1', 'completed', '2013-10-02')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('6', '2', '11', '6', 'completed', '2013-10-02')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('7', '3', '12', '6', 'completed', '2013-10-02')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('8', '2', '12', '12', 'completed', '2013-10-03')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('9', '3', '10', '12', 'completed', '2013-10-03')
insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values ('10', '4', '13', '12', 'cancelled_by_driver', '2013-10-03')

insert into Users (Users_Id, Banned, Role) values ('1', 'No', 'client')
insert into Users (Users_Id, Banned, Role) values ('2', 'Yes', 'client')
insert into Users (Users_Id, Banned, Role) values ('3', 'No', 'client')
insert into Users (Users_Id, Banned, Role) values ('4', 'No', 'client')
insert into Users (Users_Id, Banned, Role) values ('10', 'No', 'driver')
insert into Users (Users_Id, Banned, Role) values ('11', 'No', 'driver')
insert into Users (Users_Id, Banned, Role) values ('12', 'No', 'driver')
insert into Users (Users_Id, Banned, Role) values ('13', 'No', 'driver')

================================================================================
#  TSQL
================================================================================
WITH total_number_of_requests AS (
 
     SELECT request_at, COUNT(Id) AS 'Requests'
     FROM(
        SELECT DISTINCT Id,Request_at
        FROM        Trips  AS A
        INNER JOIN  Users  AS B ON A.Client_Id = B.Users_Id
        INNER JOIN  Users  AS C ON A.Driver_Id = C.Users_Id 
        WHERE B.Banned = 'No' AND C.Banned = 'No'
        AND   A.Request_at BETWEEN '2013-10-01' AND '2013-10-03'
    )Z
    GROUP BY Request_at
), total_number_of_cancels AS (
     SELECT  request_at, COUNT(Cancels) AS 'Cancels'
     FROM(
            SELECT  request_at,Id AS 'Cancels'
            FROM        Trips   AS A 
            INNER JOIN  Users   AS B ON A.Client_Id = B.Users_Id 
            INNER JOIN  Users   AS C ON A.Driver_Id = C.Users_Id
            WHERE B.Banned = 'No' AND C.Banned = 'No'
            AND   A.Request_at BETWEEN '2013-10-01' AND '2013-10-03'
            AND   A.Status IN ('cancelled_by_driver','cancelled_by_client')
    )Z
    GROUP BY request_at
)
SELECT  A.request_at AS Day, 
        ROUND(CAST(ISNULL(B.Cancels,0.0) AS FLOAT)/A.Requests,2) AS 'Cancellation Rate'
FROM      total_number_of_requests AS A 
LEFT JOIN total_number_of_cancels  AS B ON A.request_at=B.request_at

================================================================================
# MYSQL
================================================================================
SELECT
    t.request_at AS Day,
    ROUND(SUM(CASE WHEN status <> 'completed' THEN 1 ELSE 0 END)/COUNT(t.id),2) AS 'Cancellation Rate'
FROM
    L_262_Trips t 
	LEFT JOIN	L_262_Users u1 ON t.client_id = u1.users_id 
	LEFT JOIN	L_262_Users u2 ON t.driver_id = u2.users_id
WHERE  u2.banned = 'No' 
AND u1.banned = 'No' 
AND t.request_at BETWEEN '2013-10-01' AND '2013-10-03'
GROUP BY  t.request_at
================================================================================

