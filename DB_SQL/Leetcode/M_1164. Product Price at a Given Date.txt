1164. Product Price at a Given Date

Table: Products

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+

(product_id, change_date) is the primary key of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.
 
Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.

The query result format is in the following example:

Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+

Result table:
+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+

========================
schema:
========================

drop table M_1164_Products
create table M_1164_Products (
	product_id  int  ,
	new_price   int  ,
	change_date date 
)

insert into  M_1164_Products  (product_id ,  new_price , change_date)
values
(1 , 20  , '2019-08-14'),
(2 , 50  , '2019-08-14'),
(1 , 30  , '2019-08-15'),
(1 , 35  , '2019-08-16'),
(2 , 65  , '2019-08-17'),
(3 , 20  , '2019-08-18');


create table M_1158_Orders (
	order_id   int ,
	order_date date,
	item_id    int ,
	buyer_id   int ,
	seller_id  int
)

insert into M_1158_Orders (order_id, order_date, item_id, buyer_id, seller_id)
values 
(1, '2019-08-01', 4 , 1 , 2 ),
(2, '2018-08-02', 2 , 1 , 3 ),
(3, '2019-08-03', 3 , 2 , 3 ),
(4, '2018-08-04', 1 , 4 , 2 ),
(5, '2018-08-04', 1 , 3 , 4 ),
(6, '2019-08-05', 2 , 2 , 4 );

create table M_1158_Items (
	item_id   int ,
	item_brand varchar(50)
)

insert into M_1158_Items (item_id, item_brand)
values 
(1, 'Samsung'),
(2, 'Lenovo'),
(3, 'LG'),
(4, 'HP');

========================
solution:
========================

========================
SQL Server
========================

select 
	u.user_id, 
	u.join_date, 
	count(o.order_id) as orders_in_2019
from M_1158_Users u left join M_1158_Orders o 
on u.user_id = o.buyer_id 
and o.order_date >= '2019-01-01' 
and o.order_date < '2020-01-01'
group by u.user_id, u.join_date
order by u.user_id 
