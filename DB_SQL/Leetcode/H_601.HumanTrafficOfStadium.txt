601. Human Traffic of Stadium
https://leetcode.com/problems/human-traffic-of-stadium/

Table: Stadium

+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| id            | int     |
| visit_date    | date    |
| people        | int     |
+---------------+---------+
visit_date is the primary key for this table.
Each row of this table contains the visit date and visit id to the stadium with the number of people during the visit.
No two rows will have the same visit_date, and as the id increases, the dates increase as well.
 
Write an SQL query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.

Return the result table ordered by visit_date in ascending order.

The query result format is in the following example.

Stadium table:
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 1    | 2017-01-01 | 10        |
| 2    | 2017-01-02 | 109       |
| 3    | 2017-01-03 | 150       |
| 4    | 2017-01-04 | 99        |
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+

Result table:
+------+------------+-----------+
| id   | visit_date | people    |
+------+------------+-----------+
| 5    | 2017-01-05 | 145       |
| 6    | 2017-01-06 | 1455      |
| 7    | 2017-01-07 | 199       |
| 8    | 2017-01-09 | 188       |
+------+------------+-----------+
The four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.
The rows with ids 2 and 3 are not included because we need at least three consecutive ids.

========================
schema:
========================
Create table H_601_stadium (id int, visit_date DATE NULL, people int)
Truncate table H_601_stadium
insert into H_601_stadium (id, visit_date, people) values ('1', '2017-01-01', '10')
insert into H_601_stadium (id, visit_date, people) values ('2', '2017-01-02', '109')
insert into H_601_stadium (id, visit_date, people) values ('3', '2017-01-03', '150')
insert into H_601_stadium (id, visit_date, people) values ('4', '2017-01-04', '99')
insert into H_601_stadium (id, visit_date, people) values ('5', '2017-01-05', '145')
insert into H_601_stadium (id, visit_date, people) values ('6', '2017-01-06', '1455')
insert into H_601_stadium (id, visit_date, people) values ('7', '2017-01-07', '199')
insert into H_601_stadium (id, visit_date, people) values ('8', '2017-01-09', '188')

========================
solution:
========================

# for every database. 
SELECT
    s0.*
FROM
    H_601_stadium s0 
	LEFT JOIN	H_601_stadium s1 ON s1.id = s0.id + 1 
	LEFT JOIN	H_601_stadium s2 ON s2.id = s0.id + 2 
	LEFT JOIN	H_601_stadium s_1 ON s_1.id = s0.id - 1 
	LEFT JOIN	H_601_stadium s_2 ON s_2.id = s0.id - 2
WHERE
    (s0.people > 99 AND s1.people > 99 AND s2.people > 99) OR
    (s_1.people > 99 AND s0.people > 99 AND s1.people > 99) OR
    (s_2.people > 99 AND s_1.people > 99 AND s0.people > 99)
ORDER BY s0.id

================================================================================
#  TSQL
================================================================================

WITH base AS (
    SELECT id,visit_date, people, 
           ROW_NUMBER()OVER(ORDER BY visit_date) AS 'R'
    FROM   H_601_stadium
    WHERE people >= 100
), sequence AS (
    SELECT A.id
    FROM        base AS A 
    INNER JOIN  base AS B ON A.id =B.id-1 AND A.R=B.R-1
    INNER JOIN  base AS C ON A.id =C.id-2 AND A.R=C.R-2 AND B.id = C.id-1 AND B.R = C.R-1
)
SELECT A.id,visit_date, people	FROM        H_601_stadium  AS A 	WHERE A.id IN (SELECT id FROM sequence)
UNION 
SELECT A.id,visit_date, people	FROM        H_601_stadium  AS A  	WHERE A.id IN (SELECT id+1 FROM sequence)
UNION  
SELECT A.id,visit_date, people	FROM        H_601_stadium  AS A  	WHERE A.id IN (SELECT id+2 FROM sequence)
