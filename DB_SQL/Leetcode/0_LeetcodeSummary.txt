https://zqt0.gitbook.io/leetcode/sql


SELECT  A.request_at AS Day, 
        ROUND(CAST(ISNULL(B.Cancels,0.0) AS FLOAT)/A.Requests,2) AS 'Cancellation Rate'
FROM      total_number_of_requests AS A 
LEFT JOIN total_number_of_cancels  AS B ON A.request_at=B.request_at

delete from Person 
where Id not in (select min(Id) from Person group by Email)

select FirstName, LastName, City, State
from L_175_Person left join L_175_Address on L_175_Person.PersonId = L_175_Address.PersonId  

select Email 
from L_182_Person 
group by Email 
having count(Email)> 1

select id, movie, description, rating  
from L_620_cinema 
where id%2 <>0 
and description  <> 'boring' 
order by rating desc

du -k | sort -n -r | head -n 10

select max(salary) as SecondHighestSalary  
from L_176_Employee 
where Salary not in (select top 1 Salary from L_176_Employee order by Salary DESC )


update L_627_salary 
set sex = (case when sex = 'm' then 'f' when sex = 'f' then 'm' end)

select id, sum(case when month = 'Jan' then revenue else NULL end) as Jan_Revenue ,
           sum(case when month = 'Feb' then revenue else NULL end) as Feb_Revenue ,
           sum(case when month = 'Mar' then revenue else NULL end) as Mar_Revenue ,
           sum(case when month = 'Apr' then revenue else NULL end) as Apr_Revenue ,
           sum(case when month = 'May' then revenue else NULL end) as May_Revenue ,
           sum(case when month = 'Jun' then revenue else NULL end) as Jun_Revenue ,
           sum(case when month = 'Jul' then revenue else NULL end) as Jul_Revenue ,
           sum(case when month = 'Aug' then revenue else NULL end) as Aug_Revenue ,
           sum(case when month = 'Sep' then revenue else NULL end) as Sep_Revenue ,
           sum(case when month = 'Oct' then revenue else NULL end) as Oct_Revenue ,
           sum(case when month = 'Nov' then revenue else NULL end) as Nov_Revenue ,
           sum(case when month = 'Dec' then revenue else NULL end) as Dec_Revenue 
from L_1179_Department 
group by id


with base as (
	select id, month, sum(revenue) as monthRevenue from L_1179_Department d2 
	group by id, month 
)

ROUND(CAST(ISNULL(B.Cancels,0.0) AS FLOAT)/A.Requests,2) AS 'Cancellation Rate'





==========================================
#	subquery 
==========================================

select 
	monthname(ul1.DateJoined) as Month , 
	count(ul1.DateJoined) - (
		select count(ul2.DateJoined)
		from user_login as ul2
		where monthname(DateJoined) = monthname(ul1.DateJoined) -1
	) as monthChanges
from user_login as ul1 
where monthname(ul1.DateJoined) > 1
group by monthname(ul1.DateJoined)
order by ul1.DateJoined ASC

==========================================
#	Nth highest salary 
==========================================

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
SET N=N-1;
RETURN (
	SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT N, 1
);
END

==========================================
#	196. Delete Duplicate Emails
==========================================

delete 
from Person p1
where p1.Id not in (
    select * from (
        select min(Id) 
		from Person p2 
		where p1.Email = p2.Email
    ) as t
)

==========================================
#	182. Duplicate Emails
==========================================

select Email from (
    select Email, count(*)
    from Person group by Email having count(*) > 1
) as a 

==========================================
#	176. Second Highest Salary
==========================================

SELECT DISTINCT Salary AS SecondHighestSalary
FROM Employee
ORDER BY Salary DESC
LIMIT 1 OFFSET 1

==========================================
#	177. Nth Highest Salary    !!!!!!
==========================================

CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN
SET N=N-1;
RETURN (
	SELECT DISTINCT Salary 
	FROM Employee 
	ORDER BY Salary DESC 
	LIMIT N, 1
);
END

==========================================
#	183. Customers Who Never Order
==========================================

select Name as Customers 
from Customers 
where Id not in (
    select CustomerId from Orders 
)

==========================================
#	175. Combine Two Tables
==========================================

select 
p.FirstName, p.LastName, a.City, a.State
from Person p left join Address a on p.PersonId = a.PersonId    

==========================================
#	181. Employees Earning More Than Their Managers
==========================================

select 
a.Name as Employee 
from Employee a, Employee b
where a.ManagerId is not null
and a.ManagerId = b.Id
and a.Salary > b.Salary

==========================================
#	180. Consecutive Numbers
==========================================

select distinct l1.num as ConsecutiveNums
from Logs l1, Logs l2, Logs l3
where l1.id = l2.id -1
and l1.id = l3.id -2
and l1.num = l2.num 
and l1.num = l3.num 

==========================================
#	626. Exchange Seats
==========================================

select 
	(case
		when mod(id, 2) != 0 and counter != id then id +1
		when mod(id, 2) != 0 and counter = id then id
		else id -1
	end) as id , student
from seat, 
	(select count(*) as counter from seat) as b 
order by id

==========================================
#	184. Department Highest Salary
==========================================

select 
	d.Name as Department, 
	e.Name as Employee, 
	e.Salary
from Employee e, 
	( select DepartmentId , max(Salary) as MaxSalary
	  from Employee 
	  group by DepartmentId ) a, 
	Department d  
where e.Salary = a.MaxSalary
and e.DepartmentId = a.DepartmentId
and  e.DepartmentId = d.Id

==========================================
#	197. Rising Temperature
==========================================

select 
	a.id
from 
	Weather a, Weather b
where a.id = b.id+1
and a.Temperature > b.Temperature 

==========================================
#	595. Big Countries
==========================================

select 
	name, 
	population, 
	area
from 
	World 
where area > 3000000
or population > 25000000

==========================================
#	620. Not Boring Movies
==========================================

select 
	id, movie, description, rating
from 
	cinema 
where description  !=  "boring"
and mod(id, 2) != 0
order by rating DESC

==========================================
#	1179. Reformat Department Table  !!!!!!
==========================================

select
	id,
	sum(if(month='Jan', revenue, null)) as Jan_revenue,
	sum(if(month='Feb', revenue, null)) as Feb_revenue,
	sum(if(month='Mar', revenue, null)) as Mar_revenue,
	sum(if(month='Apr', revenue, null)) as Apr_revenue,
	sum(if(month='May', revenue, null)) as May_revenue,
	sum(if(month='Jun', revenue, null)) as Jun_revenue,
	sum(if(month='Jul', revenue, null)) as Jul_revenue,
	sum(if(month='Aug', revenue, null)) as Aug_revenue,
	sum(if(month='Sep', revenue, null)) as Sep_revenue,
	sum(if(month='Oct', revenue, null)) as Oct_revenue,
	sum(if(month='Nov', revenue, null)) as Nov_revenue,
	sum(if(month='Dec', revenue, null)) as Dec_revenue
from Department
group by id

==========================================
#	178. Rank Scores   !!!!!! dense_rank()  rank()
==========================================

selet 
	score, 
	dense_rank() over (order by score desc) as [Rank]
from Scores 

selet 
	score, 
	rank() over (order by score desc) as [Rank]
from Scores 



================================================================================
178.(Medium) 不分组排序
================================================================================

Create table Scores_178 (Id int, Score DECIMAL(3,2));
Truncate table Scores_178;
insert into Scores_178 (Id, Score) values ('1', '3.5');
insert into Scores_178 (Id, Score) values ('2', '3.65');
insert into Scores_178 (Id, Score) values ('3', '4.0');
insert into Scores_178 (Id, Score) values ('4', '3.85');
insert into Scores_178 (Id, Score) values ('5', '4.0');
insert into Scores_178 (Id, Score) values ('6', '3.65');

SELECT Score, ROW_NUMBER() OVER (ORDER BY Score DESC) ranking FROM Scores_178;
SELECT Score, RANK() OVER(ORDER BY Score DESC)  Rank FROM Scores; 
SELECT Score, DENSE_RANK() OVER(ORDER BY Score DESC)  Rank FROM Scores; 

MYSQL: 

# 连续排名: 1, 2, 3, 4, 5, 6, 7 ROWNUMBER()
SELECT s.Score, (@cur_rank := @cur_rank + 1) ranking
FROM Scores_178 s, (SELECT @cur_rank := 0) r
ORDER BY Score DESC;

# 并列跳跃排名: 1, 2, 2, 4, 5, 5, 7 RANK()
select Score, ranking from (
SELECT s.Score,
@rank_counter := @rank_counter + 1,
IF(@pre_score = s.Score, @cur_rank, @cur_rank := @rank_counter) ranking,
@pre_score := s.Score
FROM Scores s, (SELECT @cur_rank :=0, @pre_score := NULL, @rank_counter := 0) r
ORDER BY s.score DESC
) a;

# 并列连续排名: 1, 2, 2, 3, 4, 4, 5 DENSE_RANK()
select Score, ranking from (
SELECT s.Score,
IF(@pre_score = s.Score, @cur_rank, @cur_rank := @cur_rank+1) ranking,
@pre_score := s.Score
FROM Scores s, (SELECT @cur_rank :=0, @pre_score := NULL) r
ORDER BY s.Score DESC
) a;


================================================
574.(Medium) Winning Candidate
================================================


Create table Candidate_574 (id int, name varchar(30));
Truncate table Candidate_574;
insert into Candidate_574 (id, name) values (1, 'A');
insert into Candidate_574 (id, name) values (2, 'B');
insert into Candidate_574 (id, name) values (3, 'C');
insert into Candidate_574 (id, name) values (4, 'D');
insert into Candidate_574 (id, name) values (5, 'E');


Create table Vote_574 (id int, CandidateId  int);
Truncate table Vote_574;
insert into Vote_574 (id, CandidateId) values (1, 2);
insert into Vote_574 (id, CandidateId) values (2, 4);
insert into Vote_574 (id, CandidateId) values (3, 3);
insert into Vote_574 (id, CandidateId) values (4, 2);
insert into Vote_574 (id, CandidateId) values (5, 5);

 Candidate
+-----+---------+
| id  | Name    |
+-----+---------+
| 1   | A       |
| 2   | B       |
| 3   | C       |
| 4   | D       |
| 5   | E       |
+-----+---------+ 

 Vote
+-----+--------------+
| id  | CandidateId  |
+-----+--------------+
| 1   |     2        |
| 2   |     4        |
| 3   |     3        |
| 4   |     2        |
| 5   |     5        |
+-----+--------------+

output
+------+
| Name |
+------+
| B    |
+------+





