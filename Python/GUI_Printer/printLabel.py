# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'printLabel.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import pymssql
import sys
import datetime
import socket

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import * 
from PyQt5.QtCore import *
from PyQt5.QtWidgets import * 

from printLibs  import libs

class Ui_PrinterWindow(object):
    def setupUi(self, IMMPrinter, label):
        self.parentWindow = IMMPrinter
        self.itemdataViewDataModel = False
        self.printData = dict()
        self.printData['label'] = label
        self.printData['itemNo']   = ''
        self.printData['customerItemNo']  = ''
        self.printData['equipment'] = ''
        self.printData['desc'] = ''
        self.printData['desc'] = ''
        self.printData['lot']  = ''
        self.printData['rev']  = ''
        self.printData['pkunit'] = ''
        self.printData['unit']   = ''
        self.printData['packingQuantity']  = ''
        
        myLib = libs()
        myLib.setup()
        self.lib = myLib
        #print(self.lib.cfgData)

        IMMPrinter.setObjectName("IMMPrinter")
        IMMPrinter.resize(700, 630)
        self.centralwidget = QtWidgets.QWidget(IMMPrinter)
        self.centralwidget.setObjectName("centralwidget")
        
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)

        self.itemLabel = QtWidgets.QLabel(self.centralwidget)
        self.itemLabel.setGeometry(QtCore.QRect(40, 20, 80, 30))
        self.itemLabel.setFont(font)
        self.itemLabel.setObjectName("itemLabel")
        
        self.itemInput = QtWidgets.QTextEdit(self.centralwidget)
        self.itemInput.setGeometry(QtCore.QRect(130, 20, 150, 30))
        self.itemInput.setFont(font)
        self.itemInput.setObjectName("itemInput")
        
        self.leftMatch = QtWidgets.QRadioButton(self.centralwidget)
        self.leftMatch.setGeometry(QtCore.QRect(290, 30, 80, 20))
        self.leftMatch.setFont(font)
        self.leftMatch.setObjectName("leftMatch")
        
        self.rightMatch = QtWidgets.QRadioButton(self.centralwidget)
        self.rightMatch.setGeometry(QtCore.QRect(380, 30, 90, 20))
        self.rightMatch.setFont(font)
        self.rightMatch.setObjectName("rightMatch")

        self.fuzzyMatch = QtWidgets.QRadioButton(self.centralwidget)
        self.fuzzyMatch.setGeometry(QtCore.QRect(480, 30, 90, 20))
        self.fuzzyMatch.setFont(font)
        self.fuzzyMatch.setChecked(True)
        self.fuzzyMatch.setObjectName("fuzzyMatch")
        
        self.itemSearch = QtWidgets.QPushButton(self.centralwidget)
        self.itemSearch.setGeometry(QtCore.QRect(580, 20, 80, 30))
        self.itemSearch.setFont(font)
        self.itemSearch.setObjectName("itemSearch")
        self.itemSearch.clicked.connect(lambda: self.queryMaterial())
        
        self.itemdataView = QtWidgets.QTableView(self.centralwidget)
        self.itemdataView.setGeometry(QtCore.QRect(40, 60, 650, 200))
        self.itemdataView.setFont(font)
        self.itemdataView.setObjectName("itemdataView")
        
        self.extractdataView = QtWidgets.QPushButton(self.centralwidget)
        self.extractdataView.setGeometry(QtCore.QRect(40, 270, 80, 30))
        self.extractdataView.setFont(font)
        self.extractdataView.setObjectName("extractdataView")
        self.extractdataView.clicked.connect(lambda: self.extract())
        
        self.itemNoLabel = QtWidgets.QLabel(self.centralwidget)
        self.itemNoLabel.setGeometry(QtCore.QRect(50, 310, 45, 30))
        self.itemNoLabel.setFont(font)
        self.itemNoLabel.setObjectName("itemNoLabel")
        
        self.itemNoInput = QtWidgets.QTextEdit(self.centralwidget)
        self.itemNoInput.setGeometry(QtCore.QRect(160, 310, 160, 30))
        self.itemNoInput.setFont(font)
        self.itemNoInput.setObjectName("itemNoInput")

        self.customerNoLabel = QtWidgets.QLabel(self.centralwidget)
        self.customerNoLabel.setGeometry(QtCore.QRect(350, 310, 110, 30))
        self.customerNoLabel.setFont(font)
        self.customerNoLabel.setObjectName("customerNoLabel")
        
        self.customerNoInput = QtWidgets.QTextEdit(self.centralwidget)
        self.customerNoInput.setGeometry(QtCore.QRect(470, 310, 160, 30))
        self.customerNoInput.setFont(font)
        self.customerNoInput.setObjectName("customerNoInput")
        
        self.equipmentLabel = QtWidgets.QLabel(self.centralwidget)
        self.equipmentLabel.setGeometry(QtCore.QRect(50, 360, 80, 30))
        self.equipmentLabel.setFont(font)
        self.equipmentLabel.setObjectName("equipmentLabel")
        
        self.equipmentComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.equipmentComboBox.setGeometry(QtCore.QRect(160, 360, 160, 30))
        self.equipmentComboBox.setFont(font)
        self.equipmentComboBox.setObjectName("equipmentComboBox")
        self.initEquipmentCombobox()
        
        self.descLabel = QtWidgets.QLabel(self.centralwidget)
        self.descLabel.setGeometry(QtCore.QRect(350, 360, 80, 30))
        self.descLabel.setFont(font)
        self.descLabel.setObjectName("descLabel")
        
        self.descInput = QtWidgets.QTextEdit(self.centralwidget)
        self.descInput.setGeometry(QtCore.QRect(470, 360, 160, 30))
        self.descInput.setFont(font)
        self.descInput.setObjectName("descInput")

        self.lotLabel = QtWidgets.QLabel(self.centralwidget)
        self.lotLabel.setGeometry(QtCore.QRect(50, 410, 40, 30))
        self.lotLabel.setFont(font)
        self.lotLabel.setObjectName("lotLabel")

        self.lotInput = QtWidgets.QTextEdit(self.centralwidget)
        self.lotInput.setGeometry(QtCore.QRect(160, 410, 160, 30))
        self.lotInput.setFont(font)
        self.lotInput.setObjectName("lotInput")

        self.revLabel = QtWidgets.QLabel(self.centralwidget)
        self.revLabel.setGeometry(QtCore.QRect(390, 410, 40, 30))
        self.revLabel.setFont(font)
        self.revLabel.setObjectName("revLabel")

        self.revInput = QtWidgets.QTextEdit(self.centralwidget)
        self.revInput.setGeometry(QtCore.QRect(470, 410, 160, 30))
        self.revInput.setFont(font)
        self.revInput.setObjectName("revInput")

        self.pkUnitQuantityLabel = QtWidgets.QLabel(self.centralwidget)
        self.pkUnitQuantityLabel.setGeometry(QtCore.QRect(50, 460, 110, 30))
        self.pkUnitQuantityLabel.setFont(font)
        self.pkUnitQuantityLabel.setObjectName("pkUnitQuantityLabel")
        
        self.pkUnitQuantityInput = QtWidgets.QTextEdit(self.centralwidget)
        self.pkUnitQuantityInput.setGeometry(QtCore.QRect(160, 460, 160, 30))
        self.pkUnitQuantityInput.setFont(font)
        self.pkUnitQuantityInput.setObjectName("pkUnitQuantityInput")

        self.unitLabel = QtWidgets.QLabel(self.centralwidget)
        self.unitLabel.setGeometry(QtCore.QRect(390, 460, 40, 30))
        self.unitLabel.setFont(font)
        self.unitLabel.setObjectName("unitLabel")
        
        self.unitInput = QtWidgets.QTextEdit(self.centralwidget)
        self.unitInput.setGeometry(QtCore.QRect(470, 460, 160, 30))
        self.unitInput.setFont(font)
        self.unitInput.setObjectName("unitInput")

        self.labelQuantityLabel = QtWidgets.QLabel(self.centralwidget)
        self.labelQuantityLabel.setGeometry(QtCore.QRect(50, 510, 90, 30))
        self.labelQuantityLabel.setFont(font)
        self.labelQuantityLabel.setObjectName("labelQuantityLabel")
        
        self.labelQuantityInput = QtWidgets.QTextEdit(self.centralwidget)
        self.labelQuantityInput.setGeometry(QtCore.QRect(160, 510, 160, 30))
        self.labelQuantityInput.setFont(font)
        self.labelQuantityInput.setObjectName("labelQuantityInput")
        self.labelQuantityInput.setPlainText('1')
        self.labelQuantityInput.setReadOnly(True)

        self.packingQuantityLabel = QtWidgets.QLabel(self.centralwidget)
        self.packingQuantityLabel.setGeometry(QtCore.QRect(350, 510, 100, 30))
        self.packingQuantityLabel.setFont(font)
        self.packingQuantityLabel.setObjectName("packingQuantityLabel")
        
        self.packingQuantityInput = QtWidgets.QTextEdit(self.centralwidget)
        self.packingQuantityInput.setGeometry(QtCore.QRect(470, 510, 160, 30))
        self.packingQuantityInput.setFont(font)
        self.packingQuantityInput.setObjectName("packingQuantityInput")

        self.labelPrint = QtWidgets.QPushButton(self.centralwidget)
        self.labelPrint.setGeometry(QtCore.QRect(50, 560, 80, 30))
        self.labelPrint.setFont(font)
        self.labelPrint.setObjectName("labelPrint")
        self.labelPrint.clicked.connect(lambda: self.checkInput())
 
        self.dataclear = QtWidgets.QPushButton(self.centralwidget)
        self.dataclear.setGeometry(QtCore.QRect(150, 560, 80, 30))
        self.dataclear.setFont(font)
        self.dataclear.setObjectName("dataclear")
        self.dataclear.clicked.connect(lambda: self.reset())
        
        self.printedDataLabel = QtWidgets.QLabel(self.centralwidget)
        self.printedDataLabel.setGeometry(QtCore.QRect(550, 570, 100, 30))
        self.printedDataLabel.setFont(font)
        self.printedDataLabel.setObjectName("printedDataLabel")
        self.updatePrintedLabel()
        
        IMMPrinter.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(IMMPrinter)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 703, 23))
        self.menubar.setObjectName("menubar")
        IMMPrinter.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(IMMPrinter)
        self.statusbar.setObjectName("statusbar")
        IMMPrinter.setStatusBar(self.statusbar)

        self.retranslateUi(IMMPrinter)
        QtCore.QMetaObject.connectSlotsByName(IMMPrinter)

    def retranslateUi(self, IMMPrinter):
        _translate = QtCore.QCoreApplication.translate
        IMMPrinter.setWindowTitle(_translate("IMMPrinter", "IMM Printer Lable " + self.printData['label']))
        self.itemLabel.setText(_translate("IMMPrinter", "Item Number:"))
        self.leftMatch.setText(_translate("IMMPrinter", "left match"))
        self.rightMatch.setText(_translate("IMMPrinter", "right match"))
        self.fuzzyMatch.setText(_translate("IMMPrinter", "fuzzy match"))
        self.itemSearch.setText(_translate("IMMPrinter", "Search"))
        self.extractdataView.setText(_translate("IMMPrinter", "Extract"))
        self.itemNoLabel.setText(_translate("IMMPrinter", "Item No."))
        self.customerNoLabel.setText(_translate("IMMPrinter", "Customer Item No."))
        self.equipmentLabel.setText(_translate("IMMPrinter", "Equipment #:"))
        self.descLabel.setText(_translate("IMMPrinter", "Description"))
        self.lotLabel.setText(_translate("IMMPrinter", "Lot #"))
        self.revLabel.setText(_translate("IMMPrinter", "Rev"))
        self.pkUnitQuantityLabel.setText(_translate("IMMPrinter", "PK Unit Quantity"))
        self.unitLabel.setText(_translate("IMMPrinter", "Unit"))
        self.labelQuantityLabel.setText(_translate("IMMPrinter", "Labels Quantity"))
        self.packingQuantityLabel.setText(_translate("IMMPrinter", "Packing Quantity"))
        self.labelPrint.setText(_translate("IMMPrinter", "Print"))
        self.dataclear.setText(_translate("IMMPrinter", "Reset"))

    def updatePrintedLabel(self):
        sql = f"""
            select 
                count(*)
            from 
                MXIMM.dbo.labelDetails 
            where LABEL = '99999'
        """
        sql = sql.replace('99999', self.printData['label'])
        server   = self.lib.cfgData['mesdbserver']['server']
        database = self.lib.cfgData['mesdbserver']['database']
        user     = self.lib.cfgData['mesdbserver']['user']
        password = self.lib.cfgData['mesdbserver']['password']
        conn = pymssql.connect(server, user, password, database)
        cursor = conn.cursor()
        cursor.execute(sql)
        printedData =  cursor.fetchall()
        if len(printedData) > 0:
            self.printedDataLabel.setText("Printed: " + str(printedData[0][0]))
        else :
            self.printedDataLabel.setText("Printed:  0")

    def initEquipmentCombobox(self):
        myData = self.lib.cfgData['Equipment']
        for machineName in myData:
            self.equipmentComboBox.addItem(machineName)
        self.equipmentComboBox.setCurrentIndex(-1)

    def queryMaterial(self):
        server   = self.lib.cfgData['u9dbserver']['server']
        database = self.lib.cfgData['u9dbserver']['database']
        user     = self.lib.cfgData['u9dbserver']['user']
        password = self.lib.cfgData['u9dbserver']['password']
        
        textboxValue = self.itemInput.toPlainText()
        fiilterSql = f"""
            and Itemcode like '%99999%'
            and Itemver like '%88888%'
        """

        if self.leftMatch.isChecked():
            fiilterSql = f"""
                and Itemcode like '99999%'
                and Itemver like '88888%'
            """

        if self.rightMatch.isChecked():
            fiilterSql = f"""
                and Itemcode like '%99999'
                and Itemver like '%88888'
            """

        sql = f"""
            select 
                Itemcode , 
                Itemver , 
                CustomerItemCode,  
                Itemname_eng , 
                Itemspec,
                UOM
            from Interface.dbo.Interface_U9Item
            where 1=1
            [FILTER]
            order by Itemcode, Itemver
        """
        sql = sql.replace('[FILTER]', fiilterSql)
        itemData = textboxValue.split("-")
        if len(itemData)== 2:
            sql = sql.replace('99999', itemData[0])
            sql = sql.replace('88888', itemData[1])
        else: 
            sql = sql.replace('99999', itemData[0])
            sql = sql.replace('88888', '')
        
        conn = pymssql.connect(server, user, password, database)
        cursor = conn.cursor()
        cursor.execute(sql)
        itemDatas =  cursor.fetchall()
        self.itemDatas = itemDatas
        #print(itemDatas)

        if len(itemDatas) > 0: 
            dataModel = QtGui.QStandardItemModel(len(itemDatas),6)
            dataModel.setHorizontalHeaderLabels(['Item Code','Item Version','Customer Item Code','Item Name', 'Specification', 'UOM'])
            for row in range(len(itemDatas)) : 
                for column in range(6):
                    item = QtGui.QStandardItem('%s'%(itemDatas[row][column]))
                    dataModel.setItem(row,column,item)
            self.itemdataViewDataModel = dataModel
            self.itemdataView.setModel(self.itemdataViewDataModel)
            #self.itemTableView.horizontalHeader().setStretchLastSection(True)
            #self.itemTableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        else:
            self.lib.log("WARNING: Cannot find Items in Interface.dbo.Interface_U9Item on " + server)

    def extract(self):
        if ((self.itemdataView.selectionModel()) and len(self.itemdataView.selectionModel().selectedRows())>0):
            selectedData = self.itemdataView.selectionModel().selectedRows()
            itemData  = self.itemDatas[selectedData[0].row()]
            self.printData['itemData']  = itemData
            self.itemNoInput.setPlainText(str(itemData[0]) + "-" + str(itemData[1]))
            self.descInput.setPlainText(itemData[3])
            if itemData[2] and len(itemData[2]) > 0:
                self.customerNoInput.setPlainText(itemData[2])
                customerNos = itemData[2].split("-")
                if len(customerNos) > 1:
                    self.revInput.setPlainText(customerNos[1])
                sql = f"""
                    select 
                        PACKINGQUANTITY
                    from 
                        MXIMM.dbo.labelPacking 
                    where CUSTOMERNO = '99999'
                """
                sql = sql.replace('99999', itemData[2])
                server   = self.lib.cfgData['mesdbserver']['server']
                database = self.lib.cfgData['mesdbserver']['database']
                user     = self.lib.cfgData['mesdbserver']['user']
                password = self.lib.cfgData['mesdbserver']['password']
                conn = pymssql.connect(server, user, password, database)
                cursor = conn.cursor()
                cursor.execute(sql)
                packingData =  cursor.fetchall()
                if len(packingData) > 0:
                    self.packingQuantityInput.setPlainText(packingData[0][0])
            self.unitInput.setPlainText(itemData[5])
        else:
            self.lib.log("WARNING: itemdataView was not selected!")
            
    def checkItemNo(self):
        if len(self.itemNoInput.toPlainText()) > 0:
            self.printData['itemNo']  = self.itemNoInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.itemNoLabel.setPalette(pe)
            self.printData['itemNo'] = ''
            return False

    def checkCustomerItemNo(self):
        if len(self.customerNoInput.toPlainText()) > 0:
            self.printData['customerItemNo']  = self.customerNoInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.customerNoLabel.setPalette(pe)
            self.printData['customerItemNo']  = ''
            return False

    def checkEquipment(self):
        if (self.equipmentComboBox.currentIndex()>=0):
            self.printData['equipment'] = self.equipmentComboBox.currentText()
            return True
            #print(self.equipmentComboBox.count()) # item counts
            #print(self.equipmentComboBox.currentIndex()) # current item index
            #print(self.equipmentComboBox.currentText())  # current item text 
            #print(self.equipmentComboBox.itemText(self.equipmentComboBox.currentIndex())) # item text 
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.equipmentLabel.setPalette(pe)
            self.printData['equipment'] = ''
            return False
            #pe.setColor(QPalette.Window,Qt.blue)
            #pe.setColor(QPalette.Background,Qt.red) # set background color 
            #self.equipmentLabel.setAutoFillBackground(True)

    def checkDescription(self):
        if len(self.descInput.toPlainText()) > 0:
            self.printData['desc']  = self.descInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.descLabel.setPalette(pe)
            self.printData['desc']  = ''
            return False

    def checkLot(self):    
        if len(self.lotInput.toPlainText()) > 0:
            self.printData['lot']  = self.lotInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.lotLabel.setPalette(pe)
            self.printData['lot']  = ''
            return False

    def checkRev(self):
        if len(self.revInput.toPlainText()) > 0:
            self.printData['rev']  = self.revInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.revLabel.setPalette(pe)
            self.printData['rev']  = ''
            return False

    def checkPKUnit(self):
        if len(self.pkUnitQuantityInput.toPlainText()) > 0:
            self.printData['pkunit']  = self.pkUnitQuantityInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.pkUnitQuantityLabel.setPalette(pe)
            self.printData['pkunit']  = ''
            return False

    def checkUnit(self):
        if len(self.unitInput.toPlainText()) > 0:
            self.printData['unit']  = self.unitInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.unitLabel.setPalette(pe)
            self.printData['unit']  = ''
            return False

    def checkPackingQuantity(self):
        if len(self.packingQuantityInput.toPlainText()) > 0:
            self.printData['packingQuantity']  = self.packingQuantityInput.toPlainText()
            return True
        else :
            pe = QPalette()
            pe.setColor(QPalette.WindowText,Qt.red) # set font color
            self.packingQuantityLabel.setPalette(pe)
            self.printData['packingQuantity']  = ''
            return False

    def updatePackingQuantity(self):
        server   = self.lib.cfgData['mesdbserver']['server']
        database = self.lib.cfgData['mesdbserver']['database']
        user     = self.lib.cfgData['mesdbserver']['user']
        password = self.lib.cfgData['mesdbserver']['password']
        conn = pymssql.connect(server, user, password, database)
        cursor = conn.cursor()
        sql = f"""
            select count(*) 
            from MXIMM.dbo.labelPacking
            where CUSTOMERNO = '88888'
        """
        sql = sql.replace('88888', self.printData['customerItemNo'] )
        cursor.execute(sql)
        packingData =  cursor.fetchall()
        if packingData[0][0] == 0 :
            # insert 
            sql = f"""
                insert into MXIMM.dbo.labelPacking (CUSTOMERNO, PACKINGQUANTITY) values ('88888', '99999')
            """
            sql = sql.replace('99999', self.printData['packingQuantity'])
            sql = sql.replace('88888', self.printData['customerItemNo'] )
            cursor.execute(sql)
            conn.commit()
        else :
            # update 
            sql = f"""
                update MXIMM.dbo.labelPacking  
                set PACKINGQUANTITY =  '99999'
                where CUSTOMERNO = '88888'
            """
            sql = sql.replace('99999', self.printData['packingQuantity'])
            sql = sql.replace('88888', self.printData['customerItemNo'] )
            cursor.execute(sql)
            conn.commit()

    def checkInput(self):
        self.clearWarning()
        printFlag = False
        if self.printData['label'] == 'MHMX_FRONT_LICENSE':
            printFlag = self.checkPKUnit()
        elif self.printData['label'] == 'MHMX_ASAY_4CYL' or self.printData['label'] == 'MHMX_ASAY_6CYL' or self.printData['label'] == 'MHMX_STOSS_ABSORBER':
            printFlag = self.checkPKUnit() 
            tmpFlag = self.checkCustomerItemNo()
            printFlag = tmpFlag and printFlag
        elif self.printData['label'] == 'MHMX_PI_AMARILLA' or self.printData['label'] == 'MHMX_PI_SERIAL' :
            printFlag = self.checkPKUnit() 
            tmpFlag = self.checkItemNo()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkCustomerItemNo() 
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkDescription()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkEquipment() 
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkLot()
            printFlag = tmpFlag and printFlag
        elif self.printData['label'] == 'MHMX_PRODUCTION':
            printFlag = self.checkPKUnit()
            tmpFlag = self.checkItemNo()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkCustomerItemNo()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkUnit()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkRev()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkLot()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkDescription()
            printFlag = tmpFlag and printFlag
            tmpFlag = self.checkPackingQuantity() 
            printFlag = tmpFlag and printFlag

        if (printFlag):
            buttonReply = QMessageBox.information(self.parentWindow,"Print Conformation","Are you sure to print it?",QMessageBox.Yes|QMessageBox.No,QMessageBox.Yes)
            if buttonReply == QMessageBox.Yes:
                self.lib.log("Print starting...")
                self.printLabel()
                self.lib.log("Print Finished...")
        else:
            self.lib.log("WARNING: some fields are blank! It cannot be printed!")

    def reset(self):
        self.clearWarning()
        self.clearData()
  
    def clearWarning(self):
        pe = QPalette()
        pe.setColor(QPalette.WindowText,Qt.black) 
        #self.itemInput.setStyleSheet("background:white")
        self.itemLabel.setPalette(pe)
        self.itemNoLabel.setPalette(pe)
        self.customerNoLabel.setPalette(pe)
        self.equipmentLabel.setPalette(pe)
        self.descLabel.setPalette(pe)
        self.lotLabel.setPalette(pe)
        self.revLabel.setPalette(pe)
        self.pkUnitQuantityLabel.setPalette(pe)
        self.unitLabel.setPalette(pe)
        #self.labelQuantityLabel.setPalette(pe)
        self.packingQuantityLabel.setPalette(pe)

    def clearData(self):
        self.itemInput.clear()
        if self.itemdataViewDataModel:
            self.itemdataViewDataModel.removeRows(0,self.itemdataViewDataModel.rowCount())
        self.itemNoInput.clear()
        self.customerNoInput.clear()
        self.equipmentComboBox.setCurrentIndex(-1)
        self.descInput.clear()
        self.lotInput.clear()
        self.revInput.clear()
        self.pkUnitQuantityInput.clear()
        self.unitInput.clear()
        #self.labelQuantityInput.clear()
        self.packingQuantityInput.clear()

    def addLabelDetails(self, sn, timestamp):
        sql = f"""
            insert into MXIMM.dbo.labelDetails (
                LABEL,
                DATETIME,
                ITEMNO,
                ITEMVERSION,
                CUSTOMERNO,
                MACHINE,
                DESCRIPTION,
                LOT,
                REV,
                PKUNIT,
                UNIT,
                PACKINGQUANTITY,
                SN
            )
            values (
                '[LABEL]',
                '[DATETIME]',
                '[ITEMNO]',
                '[ITEMVERSION]',
                '[CUSTOMERNO]',
                '[MACHINE]',
                '[DESCRIPTION]',
                '[LOT]',
                '[REV]',
                '[PKUNIT]',
                '[UNIT]',
                '[PACKINGQUANTITY]',
                '[SN]'
            )
        """
        items = self.printData['itemNo'].split("-")
        if len(items) > 1:
            sql = sql.replace('[ITEMNO]',       items[0])
            sql = sql.replace('[ITEMVERSION]',  items[1])   
        else :
            sql = sql.replace('[ITEMNO]',       '')
            sql = sql.replace('[ITEMVERSION]',  '') 
        sql = sql.replace('[LABEL]',        self.printData['label'])
        sql = sql.replace('[CUSTOMERNO]',   self.printData['customerItemNo'])
        sql = sql.replace('[MACHINE]',      self.printData['equipment'])
        sql = sql.replace('[DESCRIPTION]',  self.printData['desc'])
        sql = sql.replace('[LOT]',          self.printData['lot'])
        sql = sql.replace('[REV]',          self.printData['rev'])
        sql = sql.replace('[UNIT]',         self.printData['unit'])
        sql = sql.replace('[PKUNIT]',       self.printData['pkunit'])
        sql = sql.replace('[DATETIME]',     timestamp)
        sql = sql.replace('[PACKINGQUANTITY]', self.printData['packingQuantity'])
        sql = sql.replace('[SN]', sn)
        server   = self.lib.cfgData['mesdbserver']['server']
        database = self.lib.cfgData['mesdbserver']['database']
        user     = self.lib.cfgData['mesdbserver']['user']
        password = self.lib.cfgData['mesdbserver']['password']
        conn = pymssql.connect(server, user, password, database)
        cursor = conn.cursor()
        cursor.execute(sql)
        conn.commit()

    def printLabel(self):
        #print(self.printData)
        templateData = self.getLabelTemplate()
        templateFile   = self.lib.templateDir + templateData[1]
        printerIP      = templateData[2]
        printerPORT    = templateData[3]

        itemNo      = self.printData['itemNo']        
        custItemNo  = self.printData['customerItemNo'] 
        immMachine  = self.printData['equipment']
        itemName    = self.printData['desc']
        productName = self.printData['desc']
        lot         = self.printData['lot']
        rev         = self.printData['rev'] 
        pkunit      = self.printData['pkunit'] # MHMX_PRODUCTION
        unit        = self.printData['unit']
        packingQuantity = self.printData['packingQuantity']  # MHMX_PRODUCTION
        labelunit   = 1
        timestamp  = datetime.datetime.now().strftime('%m/%d/%Y %H:%M:%S')
        currDate   = datetime.datetime.now().strftime('%Y-%m-%d')
        yymmdd     = datetime.datetime.now().strftime('%y%m%d')

        zplString = ''
        with open(templateFile,  'r') as myFR:
            for data in myFR.readlines():
                data = data.replace('[ITEMNO]',       itemNo)
                data = data.replace('[CUSTOMERNO]',   custItemNo)
                data = data.replace('[MACHINE]',      immMachine)
                data = data.replace('[DESCRIPTION]',  itemName)
                data = data.replace('[PRODUCTNAME]',  productName)
                data = data.replace('[LOT]',          lot)
                data = data.replace('[REV]',          rev)
                data = data.replace('[UNIT]',         unit)
                data = data.replace('[DATETIME]',     timestamp)
                data = data.replace('[YYMMDD]',   yymmdd)
                data = data.replace('[DATE]', currDate)
                zplString = zplString + data
        if templateData[0] == 'MHMX_FRONT_LICENSE' or templateData[0] == 'MHMX_ASAY_4CYL' or templateData[0] == 'MHMX_ASAY_6CYL' or templateData[0] == 'MHMX_STOSS_ABSORBER' :
            for index in range(int(pkunit)):
                currZPL = zplString
                currZPL = bytes(currZPL, "utf-8")
                mysocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)         
                try:
                    mysocket.connect((printerIP, int(printerPORT))) #connecting to host
                    mysocket.send(currZPL)
                    mysocket.close () 
                except:
                    self.lib.log("Error with the connection to printer: " + printerIP + ":" + printerPORT)
                    exit()
                self.addLabelDetails('', timestamp)
                self.lib.log(self.printData['label'] + " " + str(index+1) + " printed.") 
        elif templateData[0] == 'MHMX_PRODUCTION':  # replace NUMBER and barcode 
            self.updatePackingQuantity()
            round = int(int(pkunit)/int(packingQuantity))
            if int(pkunit)%int(packingQuantity) >0:
                round += 1
            snList = self.lib.getSNs(round)
            if not snList:
                self.lib.log("Error: cannot get SN serial number")
                exit()
            for i in range(round):
                tmpString = zplString
                if i == round - 1:
                    self.printData['packingQuantity'] = str(int(pkunit)- int(packingQuantity)*(i) )
                    tmpString = tmpString.replace('[NUMBER]', self.printData['packingQuantity'])
                else :
                    tmpString = tmpString.replace('[NUMBER]', packingQuantity)
                tmpString = tmpString.replace('[BARCODE]', snList[i])
                tmpString = bytes(tmpString, "utf-8")
                mysocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                try:
                    mysocket.connect((printerIP, int(printerPORT))) #connecting to host
                    mysocket.send(tmpString)
                    mysocket.close()
                except:
                    self.lib.log("Error with the connection to printer: " + printerIP + ":" + printerPORT)
                    exit()
                self.addLabelDetails(snList[i], timestamp)
                self.lib.log(self.printData['label'] + " " + str(i+1) + " " + snList[i] + " printed.") 
        else : # only replace barcode
            snList = self.lib.getSNs(int(pkunit))
            if not snList:
                self.lib.log("Error: cannot get SN serial number")
                exit()
            for currSN in snList:
                currZPL = zplString
                currZPL = currZPL.replace('[BARCODE]', currSN)
                currZPL = bytes(currZPL, "utf-8")
                mysocket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
                try:
                    mysocket.connect((printerIP, int(printerPORT))) #connecting to host
                    mysocket.send(currZPL)
                    mysocket.close() 
                except:
                    self.lib.log("Error with the connection to printer: " + printerIP + ":" + printerPORT)
                    exit()
                self.addLabelDetails(currSN, timestamp)
                self.lib.log(self.printData['label'] + " " + currSN + " printed.") 

        self.updatePrintedLabel()

    def getLabelTemplate(self):
        server   = self.lib.cfgData['mesdbserver']['server']
        database = self.lib.cfgData['mesdbserver']['database']
        user     = self.lib.cfgData['mesdbserver']['user']
        password = self.lib.cfgData['mesdbserver']['password']
        currLabel = self.printData['label']
        sql = f"""
            select 
                t.name, 
                t.TEMPLATEFILE, 
                p.IP, 
                p.PORT 
            from 
                MXIMM.dbo.labelTemplates t,
                MXIMM.dbo.labelPrinters p
            where t.PRINTER_ID  = p.ID
            and t.name = '99999'
        """
        sql = sql.replace('99999', currLabel)
        conn = pymssql.connect(server, user, password, database)
        cursor = conn.cursor()
        cursor.execute(sql)
        templateData =  cursor.fetchall()
        if len(templateData) > 0: 
            return templateData[0]
        else :
            self.lib.log("Error: Cannot find label template: " + currLabel + " in table MXIMM.dbo.labelTemplates")
            exit()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    IMMPrinter = QtWidgets.QMainWindow()
    ui = Ui_IMMPrinter()
    ui.setupUi(IMMPrinter)
    IMMPrinter.show()
    sys.exit(app.exec_())
